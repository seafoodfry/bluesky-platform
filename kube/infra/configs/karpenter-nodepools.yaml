# Here we install generic karpenter resources we want to make available to all our clusters.
# Karpenter itself is defined in kube/infra/controllers.
# Cluster-specific controllers are managed directly in kube/clusters/CLUSTER_NAME
# and applications are managed through a similar process as these resources via the kube/apps
# directory hierarchy.
---
# https://karpenter.sh/docs/concepts/nodeclasses/
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default
spec:
  role: Karpenter-platform
  #amiFamily: AL2
  amiFamily: AL2023
  amiSelectorTerms:
  #  - alias: al2023@v20241205 # amazon-eks-node-al2023-arm64-standard-1.31-v20241205
    - name: "amazon-eks-node-*"
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: platform
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: platform
  tags:
    KarpenterManaged: "true"
    Terraform: "true"
---
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
spec:
  template:
    spec:
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
      expireAfter: 24h
      terminationGracePeriod: 1h
      requirements:
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot"]
        - key: kubernetes.io/arch
          operator: In
          values: ["arm64"]
        - key: "karpenter.k8s.aws/instance-category"
          operator: In
          values: ["c", "m", "r", "t"]
  limits:
    cpu: 100
    memory: 100Gi
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 1m